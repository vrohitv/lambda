const https = require('https');
const fs = require('fs');
const url = require('url');
const querystring = require('querystring');
const path = require('path');
const { Fido2Lib } = require("fido2-lib");
const { randomUUID } = require('crypto');
const base64url = require('base64url');

const f2l = new Fido2Lib({
    timeout: 42,
    rpId: "192.168.1.111",
    rpName: "topics",
    rpIcon: "https://cdn-icons-png.flaticon.com/512/2875/2875807.png",
    challengeSize: 128,
    attestation: "none",
    cryptoParams: [-7, -257],
    authenticatorAttachment: "platform",
    authenticatorRequireResidentKey: false,
    authenticatorUserVerification: "required"
});
const options = {
    key: fs.readFileSync(path.join(__dirname, 'key.pem')),
    cert: fs.readFileSync(path.join(__dirname, 'cert.pem'))
};

const hostname = '0.0.0.0';
const port = 3000;

const server = https.createServer(options, async(req, res) => {
    const parsedUrl = url.parse(req.url);
    const path = parsedUrl.path
    const queryParams = querystring.parse(parsedUrl.query);
    if (req.method === 'GET') {
        if(path == "/auth/registerRequest"){
            const registrationOptions = await f2l.attestationOptions();
            registrationOptions.user.id = base64url.encode(randomUUID());
            registrationOptions.user.name = "vemurirohit888@gmail.com"
            registrationOptions.user.displayName = "Vemuri Venkat Rohit"
            registrationOptions.challenge = base64url.encode(registrationOptions.challenge)
            console.log(registrationOptions)
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');

            return res.end(JSON.stringify(registrationOptions));
        }
        res.statusCode = 200;
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({ message: 'Hello, Secure World!', queryParams: queryParams }));
    } else if (req.method === 'POST') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            const parsedBody = JSON.parse(body);
            res.statusCode = 200;
            res.setHeader('Content-Type', 'application/json');
            res.end(JSON.stringify({ message: 'Data received', queryParams: queryParams, body: parsedBody }));
        });
    } else {
        res.statusCode = 405;
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({ message: 'Method Not Allowed' }));
    }
});

server.listen(port, hostname, () => {
    console.log(`Server running at https://${hostname}:${port}/`);
});
